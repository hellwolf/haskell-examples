#+Title: A Simple (Quasi) CSV Decoder API With Type List Schema

* Motivation
- To parse input that has lost its structural information, a schema should be provided to assist the parser to recover
  the structure.
- Type list can be a succinct and ergonomic way to provide such schema to the parser.
- This example project provides an example of such syntax.
- To simplify the example though, a form of input that looks like comma separated values is chosen; but its structural
  information is still recoverable which should still allow schema-less parsing.
* What Is It
- A ~csvDecoder~ function (the API) parsing input string that looks like comma separated values (CSV).
- Integer values, string values and lists of them are supported.
- The schema for the input is required, and can be supplied through the type applications of the first type parameter to
  the API.
- The schema can be in two forms:
  - Type list form:
    #+begin_src haskell
csvDecode @(IntVal :> (StringVal :> IntVal :> ()) :> (StringVal :> IntVal :> ()) :> ())
  "42,(\"estonia\",14),(\"finland\",50)"
    #+end_src
  - Type tuple form:
    #+begin_src haskell
csvDecode @(StringVal, [(IntVal, IntVal)])
  "\"germany\",[(1,3),(5,7),(11,13)]"
    #+end_src
* How Does It Work
- ~TList~: a type class for constructing type list and their decoding function ~csv_decode~.
- ~EQUIV_TO_TLIST~: a closed type family to map syntactic sugar form such as type tuples to type list form.
- ~csvDecode~: the API that packages everything into one single function.
